package com.dfwy.online.sparkstreamingtask.vcloude.task;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.dfwy.online.sparkstreamingtask.dao.ETLCleanWriteDao;
import common.pojo.applicantinformation.ApplicantInformationTO;
import common.pojo.etlstandardtable.*;
import common.utils.date.DateUtils;

import common.utils.sqlsessionfactoryutil.SqlSessionFactoryUtil;
import common.utils.uuid.UUIDGenerator;
import org.apache.ibatis.session.SqlSession;

import java.util.ArrayList;
import java.util.List;


/**
 * @author: dxx
 * @version: V-Cloude
 * @date: 2018/12/17 13:41
 * @copyright©: 2018东方微银科技（北京）有限公司
 * @file_name: wybigdata
 * @pachage_name: com.dfwy.online.sparkstreamingtask.vcloude.task
 * @description:对报文数据进行数据清洗工作，最后传入mysql标准表！
 */
public class ETLInsertData {
    public static void etlClean(ApplicantInformationTO applicantInformationTO) {
        //std_ent_alter_list
        etlCleanStdEntAlterList(applicantInformationTO.getAmarsoftData(),
                applicantInformationTO.getBusinessID(),
                applicantInformationTO.getReqID());
    }

   /*
   * @Description:
   * @param: [amarsoftData, businessID, reqID]
   * @return: void
   * @author:Dxx
   * @Date: 2018/12/19 18:04
   */
   /*void inserStdEntSharesImpawnListList(List<StdEntSharesImpawnList> stdEntSharesImpawnListList)throws DaoException;*/
    public static void etlCleanStdEntSharesImpawnList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  sharesImpawnList = r1103Data.getJSONObject(0).getJSONArray("sharesImpawnList");

        List<StdEntSharesImpawnList> stdEntSharesImpawnListList = new ArrayList<>();

        //建立入库对象数组
        StdEntSharesImpawnList stdEntSharesImpawnList = null;
        for (Object sharesImpawnListObj : sharesImpawnList) {
            stdEntSharesImpawnList = new StdEntSharesImpawnList();
            JSONObject sharesImpawnListObject = (JSONObject) sharesImpawnListObj;
            stdEntSharesImpawnList.setUuid(UUIDGenerator.generate());
            stdEntSharesImpawnList.setBusinessID(businessID);
            stdEntSharesImpawnList.setReqID(reqID);

            stdEntSharesImpawnList.setImporg(sharesImpawnListObject.getString("impoRg"));
            stdEntSharesImpawnList.setImporgtype(sharesImpawnListObject.getString("impoRgtype"));
            stdEntSharesImpawnList.setImpam(sharesImpawnListObject.getDouble("impAm"));
            stdEntSharesImpawnList.setImponrecdate(DateUtils.strToDate(sharesImpawnListObject.getString("imponrecDate")));
            stdEntSharesImpawnList.setImpexaeep(sharesImpawnListObject.getString("impExaeep"));
            stdEntSharesImpawnList.setImpsandate(DateUtils.strToDate(sharesImpawnListObject.getString("impSanDate")));
            stdEntSharesImpawnList.setImpto(DateUtils.strToDate(sharesImpawnListObject.getString("impTo")));

            stdEntSharesImpawnListList.add(stdEntSharesImpawnList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntSharesImpawnListList(stdEntSharesImpawnListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntSharesImpawnListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 18:04
    */
    /*void inserStdEntMorGuainfoListList(List<StdEntMorGuainfoList> stdEntMorGuainfoListList)throws DaoException;*/
    public static void etlCleanStdEntMorGuainfoList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  morguaInfoList = r1103Data.getJSONObject(0).getJSONArray("morguaInfoList");

        List<StdEntMorGuainfoList> stdEntMorGuainfoListList = new ArrayList<>();

        //建立入库对象数组
        StdEntMorGuainfoList stdEntMorGuainfoList = null;
        for (Object morguaInfoListObj : morguaInfoList) {
            stdEntMorGuainfoList = new StdEntMorGuainfoList();
            JSONObject morguaInfoListObject = (JSONObject) morguaInfoListObj;
            stdEntMorGuainfoList.setUuid(UUIDGenerator.generate());
            stdEntMorGuainfoList.setBusinessID(businessID);
            stdEntMorGuainfoList.setReqID(reqID);

            stdEntMorGuainfoList.setMorregID(morguaInfoListObject.getString("morreg_Id"));
            stdEntMorGuainfoList.setGuaname(morguaInfoListObject.getString("guaName"));
            stdEntMorGuainfoList.setQuan(morguaInfoListObject.getString("quan"));
            stdEntMorGuainfoList.setGuavalue(morguaInfoListObject.getDouble("value"));

            stdEntMorGuainfoListList.add(stdEntMorGuainfoList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntMorGuainfoListList(stdEntMorGuainfoListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntMorGuainfoListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 18:03
    */
    /*void inserStdEntLiquidationListList(List<StdEntLiquidationList> stdEntLiquidationListList)throws DaoException;*/
    public static void etlCleanStdEntLiquidationList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  liquidationList = r1103Data.getJSONObject(0).getJSONArray("liquidationList");

        List<StdEntLiquidationList> stdEntLiquidationListList = new ArrayList<>();

        //建立入库对象数组
        StdEntLiquidationList stdEntLiquidationList = null;
        for (Object liquidationListObj : liquidationList) {
            stdEntLiquidationList = new StdEntLiquidationList();
            JSONObject liquidationListObject = (JSONObject) liquidationListObj;
            stdEntLiquidationList.setUuid(UUIDGenerator.generate());
            stdEntLiquidationList.setBusinessID(businessID);
            stdEntLiquidationList.setReqID(reqID);

            stdEntLiquidationList.setLigentity(liquidationListObject.getString("ligentity"));
            stdEntLiquidationList.setLigprincipal(liquidationListObject.getString("ligprincipal"));
            stdEntLiquidationList.setLiqmen(liquidationListObject.getString("liqMen"));
            stdEntLiquidationList.setLigst(liquidationListObject.getString("liGst"));
            stdEntLiquidationList.setLigenddate(DateUtils.strToDate(liquidationListObject.getString("ligEndDate")));
            stdEntLiquidationList.setDebttranee(liquidationListObject.getString("debtTranee"));
            stdEntLiquidationList.setClaimtranee(liquidationListObject.getString("claimTranee"));

            stdEntLiquidationListList.add(stdEntLiquidationList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntLiquidationListList(stdEntLiquidationListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntLiquidationListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 18:03
    */
    /*void inserStdEntInvitemListList(List<StdEntInvitemList> stdEntInvitemListList)throws DaoException;*/
    public static void etlCleanStdEntInvitemList(String amarsoftData, String businessID, String reqID) throws Exception {
                  //将Json字符串转为Json对象
                  JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
                  JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
                  JSONArray  r1103Data = r1103.getJSONArray("data");
                  JSONArray  entinvItemList = r1103Data.getJSONObject(0).getJSONArray("entinvItemList");

                  List<StdEntInvitemList> stdEntInvitemListList = new ArrayList<>();

                  //建立入库对象数组
                  StdEntInvitemList stdEntInvitemList = null;
                  for (Object entinvItemListObj : entinvItemList) {
                      stdEntInvitemList = new StdEntInvitemList();
                      JSONObject entinvItemListObject = (JSONObject) entinvItemListObj;
                      stdEntInvitemList.setUuid(UUIDGenerator.generate());
                      stdEntInvitemList.setBusinessID(businessID);
                      stdEntInvitemList.setReqID(reqID);

                      stdEntInvitemList.setInventname(entinvItemListObject.getString("entName"));
                      stdEntInvitemList.setInvregno(entinvItemListObject.getString("regNo"));
                      stdEntInvitemList.setInventtype(entinvItemListObject.getString("entType"));
                      stdEntInvitemList.setInvregcap(entinvItemListObject.getString("regCap"));
                      stdEntInvitemList.setRegcapcur(entinvItemListObject.getString("regCapcur"));
                      stdEntInvitemList.setCandate(entinvItemListObject.getString("canDate"));
                      stdEntInvitemList.setRevdate(entinvItemListObject.getString("revDate"));
                      stdEntInvitemList.setRegstatus(entinvItemListObject.getString("entStatus"));
                      stdEntInvitemList.setRegorg(entinvItemListObject.getString("regOrg"));
                      stdEntInvitemList.setSubconam(entinvItemListObject.getDouble("subConam"));
                      stdEntInvitemList.setCurrency(entinvItemListObject.getString("currency"));
                      stdEntInvitemList.setFundedratio(entinvItemListObject.getString("fundedRatio"));
                      stdEntInvitemList.setEsdate(entinvItemListObject.getString("esDate"));
                      stdEntInvitemList.setInvlrname(entinvItemListObject.getString("name"));

                      stdEntInvitemListList.add(stdEntInvitemList);
                  }
                  SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
                  ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
                  try {
                      ETLCleanWriteDao.inserStdEntInvitemListList(stdEntInvitemListList);
                      sqlSession.commit();
                  } catch (Exception e) {
                      e.printStackTrace();
                      sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
                  } finally {
                      stdEntInvitemListList.clear();
                      sqlSession.close();
                  }
              }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 15:08
    */
    /*void inserStdEntFiliationListList(List<StdEntFiliationList> stdEntFiliationListList)throws DaoException;*/
    public static void etlCleanStdEntFiliationList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  filiationList = r1103Data.getJSONObject(0).getJSONArray("filiationList");

        List<StdEntFiliationList> stdEntFiliationListList = new ArrayList<>();

        //建立入库对象数组
        StdEntFiliationList stdEntFiliationList = null;
        for (Object filiationListObj : filiationList) {
            stdEntFiliationList = new StdEntFiliationList();
            JSONObject filiationListObject = (JSONObject) filiationListObj;
            stdEntFiliationList.setUuid(UUIDGenerator.generate());
            stdEntFiliationList.setBusinessID(businessID);
            stdEntFiliationList.setReqID(reqID);

            stdEntFiliationList.setBrname(filiationListObject.getString("brName"));
            stdEntFiliationList.setBrregno(filiationListObject.getString("brRegno"));
            stdEntFiliationList.setBrprincipal(filiationListObject.getString("brPrincipal"));
            stdEntFiliationList.setCbuitem(filiationListObject.getString("cbuItem"));
            stdEntFiliationList.setBraddr(filiationListObject.getString("brAddr"));

            stdEntFiliationListList.add(stdEntFiliationList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntFiliationListList(stdEntFiliationListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntFiliationListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 14:48
    */
    /*<!--void inserStdEntCaseInfoListList(List<StdEntCaseInfoList> stdEntCaseInfoListList)throws DaoException;-->*/
    public static void etlCleanStdEntCaseInfoList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  caseInfoList = r1103Data.getJSONObject(0).getJSONArray("caseInfoList");

        List<StdEntCaseInfoList> stdEntCaseInfoListList = new ArrayList<>();

        //建立入库对象数组
        StdEntCaseInfoList stdEntCaseInfoList = null;
        for (Object caseInfoListObj : caseInfoList) {
            stdEntCaseInfoList = new StdEntCaseInfoList();
            JSONObject caseInfoListObject = (JSONObject) caseInfoListObj;
            stdEntCaseInfoList.setUuid(UUIDGenerator.generate());
            stdEntCaseInfoList.setBusinessID(businessID);
            stdEntCaseInfoList.setReqID(reqID);

            stdEntCaseInfoList.setCasetime(caseInfoListObject.getString("caseTime"));
            stdEntCaseInfoList.setCasereason(caseInfoListObject.getString("caseReason"));
            stdEntCaseInfoList.setCasetype(caseInfoListObject.getString("caseType"));
            stdEntCaseInfoList.setExesort(caseInfoListObject.getString("exeSort"));
            stdEntCaseInfoList.setCaseresult(caseInfoListObject.getString("caseResult"));
            stdEntCaseInfoList.setPendecissdate(caseInfoListObject.getString("pendecissDate"));
            stdEntCaseInfoList.setPenauth(caseInfoListObject.getString("penAuth"));
            stdEntCaseInfoList.setIllegfact(caseInfoListObject.getString("illegFact"));
            stdEntCaseInfoList.setPenbasis(caseInfoListObject.getString("penBasis"));
            stdEntCaseInfoList.setPentype(caseInfoListObject.getString("penType"));
            stdEntCaseInfoList.setPenresult(caseInfoListObject.getString("penResult"));
            stdEntCaseInfoList.setPenam(caseInfoListObject.getString("penAm"));
            stdEntCaseInfoList.setPenexest(caseInfoListObject.getString("penExest"));
            //stdEntCaseInfoList.setPendecno(caseInfoListObject.getString("Pendecno"));原始JSON报文没有此条数据

            stdEntCaseInfoListList.add(stdEntCaseInfoList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntCaseInfoListList(stdEntCaseInfoListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntCaseInfoListList.clear();
            sqlSession.close();
        }
    }




    public static void etlCleanStdEntSharesfrostList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  sharesFrostList = r1103Data.getJSONObject(0).getJSONArray("sharesFrostList");

        List<StdEntSharesfrostList> stdEntSharesfrostListList = new ArrayList<>();

        //建立入库对象数组
        StdEntSharesfrostList stdEntSharesfrostList = null;
        for (Object sharesFrostListObj : sharesFrostList) {
            stdEntSharesfrostList = new StdEntSharesfrostList();
            JSONObject sharesFrostListObject = (JSONObject) sharesFrostListObj;
            stdEntSharesfrostList.setUuid(UUIDGenerator.generate());
            stdEntSharesfrostList.setBusinessID(businessID);
            stdEntSharesfrostList.setReqID(reqID);

            stdEntSharesfrostList.setFrodocno(sharesFrostListObject.getString("froDocno"));
            stdEntSharesfrostList.setFroauth(sharesFrostListObject.getString("froAuth"));
            stdEntSharesfrostList.setFrofrom(DateUtils.strToDate(sharesFrostListObject.getString("froFrom")));
            stdEntSharesfrostList.setFroto(DateUtils.strToDate(sharesFrostListObject.getString("froTo")));
            stdEntSharesfrostList.setFroam(sharesFrostListObject.getDouble("froAm"));
            stdEntSharesfrostList.setThawauth(sharesFrostListObject.getString("thawAuth"));
            stdEntSharesfrostList.setThawdocno(sharesFrostListObject.getString("thawDocno"));
            stdEntSharesfrostList.setThawdate(DateUtils.strToDate(sharesFrostListObject.getString("thawDate")));
            stdEntSharesfrostList.setThawcomment(sharesFrostListObject.getString("thawComment"));

            stdEntSharesfrostListList.add(stdEntSharesfrostList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntSharesfrostListList(stdEntSharesfrostListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntSharesfrostListList.clear();
            sqlSession.close();
        }
    }

    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 11:14
    */
    public static void etlCleanStdEntShareHolderList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  shareHolderList = r1103Data.getJSONObject(0).getJSONArray("shareHolderList");

        List<StdEntShareHolderList> stdEntShareHolderListList = new ArrayList<>();

        //建立入库对象数组
        StdEntShareHolderList stdEntShareHolderList = null;
        for (Object shareHolderObj : shareHolderList) {
            stdEntShareHolderList = new StdEntShareHolderList();
            JSONObject shareHolderObject = (JSONObject) shareHolderObj;
            stdEntShareHolderList.setUuid(UUIDGenerator.generate());
            stdEntShareHolderList.setBusinessID(businessID);
            stdEntShareHolderList.setReqID(reqID);

            stdEntShareHolderList.setShareholdername(shareHolderObject.getString("shareholderName"));
            stdEntShareHolderList.setSubconam(shareHolderObject.getDouble("subConam"));
            stdEntShareHolderList.setRegcapcur(shareHolderObject.getString("regCapCur"));
            stdEntShareHolderList.setCondate(shareHolderObject.getString("conDate"));
            stdEntShareHolderList.setFundedratio(shareHolderObject.getString("fundedRatio"));
            stdEntShareHolderList.setCountry(shareHolderObject.getString("country"));

            stdEntShareHolderListList.add(stdEntShareHolderList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntShareHolderListList(stdEntShareHolderListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntShareHolderListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 11:14
    */
    public static void etlCleanStdEntPersonList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  personList = r1103Data.getJSONObject(0).getJSONArray("personList");

        List<StdEntPersonList> stdEntPersonListList = new ArrayList<>();

        //建立入库对象数组
        StdEntPersonList stdEntPersonList = null;
        for (Object personObj : personList) {
            stdEntPersonList = new StdEntPersonList();
            JSONObject personObject = (JSONObject) personObj;
            stdEntPersonList.setUuid(UUIDGenerator.generate());
            stdEntPersonList.setBusinessID(businessID);
            stdEntPersonList.setReqID(reqID);

            stdEntPersonList.setName(personObject.getString("name"));
            stdEntPersonList.setPosition(personObject.getString("position"));
            stdEntPersonList.setSex(personObject.getString("sex"));

            stdEntPersonListList.add(stdEntPersonList);
        }
        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntPersonListList(stdEntPersonListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntPersonListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 11:14
    */
    public static void etlCleanStdEntMorDetailList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray  r1103Data = r1103.getJSONArray("data");
        JSONArray  morDetailList = r1103Data.getJSONObject(0).getJSONArray("morDetailList");

        List<StdEntMorDetailList> stdEntMorDetailListList = new ArrayList<>();

        //建立入库对象数组
        StdEntMorDetailList stdEntMorDetailList = null;
        for (Object morDetailObj : morDetailList) {
            stdEntMorDetailList = new StdEntMorDetailList();
            JSONObject morDetailObject = (JSONObject) morDetailObj;
            stdEntMorDetailList.setUuid(UUIDGenerator.generate());
            stdEntMorDetailList.setBusinessID(businessID);
            stdEntMorDetailList.setReqID(reqID);

            stdEntMorDetailList.setMorregid(morDetailObject.getString("morregId"));
            stdEntMorDetailList.setMortgagor(morDetailObject.getString("mortgaGor"));
            stdEntMorDetailList.setMore(morDetailObject.getString("more"));
            stdEntMorDetailList.setRegorg(morDetailObject.getString("regOrg"));
            stdEntMorDetailList.setRegdate(DateUtils.strToDate(morDetailObject.getString("regiDate")));
            stdEntMorDetailList.setMortype(morDetailObject.getString("morType"));
            stdEntMorDetailList.setMorregcno(morDetailObject.getString("morRegcno"));
            stdEntMorDetailList.setAppregrea(morDetailObject.getString("appreGrea"));
            stdEntMorDetailList.setPriclaseckind(morDetailObject.getString("priclasecKind"));
            stdEntMorDetailList.setPriclasecam(morDetailObject.getDouble("priclaseCam"));
            stdEntMorDetailList.setPefperfrom(DateUtils.strToDate(morDetailObject.getString("pefperFrom")));
            stdEntMorDetailList.setPefperto(DateUtils.strToDate(morDetailObject.getString("pefperTo")));
            stdEntMorDetailList.setCandate(DateUtils.strToDate(morDetailObject.getString("canDate")));

            stdEntMorDetailListList.add(stdEntMorDetailList);
        }


        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntMorDetailListList(stdEntMorDetailListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntMorDetailListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 9:54
    */
    public static void etlCleanStdEntLrpositionList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray r1103Data = r1103.getJSONArray("data");
        JSONArray frPositionList = r1103Data.getJSONObject(0).getJSONArray("frPositionList");

        List<StdEntLrpositionList> stdEntLrpositionListList = new ArrayList<>();

        //建立入库对象数组
        StdEntLrpositionList stdEntLrpositionList = null;
        for (Object frPositionObj : frPositionList) {
            stdEntLrpositionList = new StdEntLrpositionList();
            JSONObject frPositionObject = (JSONObject) frPositionObj;
            stdEntLrpositionList.setUuid(UUIDGenerator.generate());
            stdEntLrpositionList.setBusinessID(businessID);
            stdEntLrpositionList.setReqID(reqID);

            stdEntLrpositionList.setLrname(frPositionObject.getString("frName"));
            stdEntLrpositionList.setPostionentname(frPositionObject.getString("entName"));
            stdEntLrpositionList.setPostioncreditcode(frPositionObject.getString("creditCode"));
            stdEntLrpositionList.setPostionregno(frPositionObject.getString("regNo"));
            stdEntLrpositionList.setPostionenttype(frPositionObject.getString("entType"));
            stdEntLrpositionList.setPostionregcap(frPositionObject.getDouble("regCap"));
            stdEntLrpositionList.setRegcapcur(frPositionObject.getString("regCapCur"));
            stdEntLrpositionList.setRegstatus(frPositionObject.getString("entStatus"));
            stdEntLrpositionList.setCandate(frPositionObject.getString("canDate"));
            stdEntLrpositionList.setRevdate(frPositionObject.getString("revDate"));
            stdEntLrpositionList.setRegorg(frPositionObject.getString("regOrg"));
            stdEntLrpositionList.setPosition(frPositionObject.getString("position"));
            stdEntLrpositionList.setLerepsign(frPositionObject.getString("lerepsign"));
            stdEntLrpositionList.setEsdate(frPositionObject.getString("esDate"));

            stdEntLrpositionListList.add(stdEntLrpositionList);
        }

        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntLrpositionListList(stdEntLrpositionListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntLrpositionListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/19 9:54
    */
    public static void etlCleanStdEntLrinvList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray r1103Data = r1103.getJSONArray("data");
        JSONArray frinvList = r1103Data.getJSONObject(0).getJSONArray("frinvList");

        List<StdEntLrinvList> stdEntLrinvListList = new ArrayList<>();

        //建立入库对象数组
        StdEntLrinvList stdEntLrinvList = null;
        for (Object frinvObj : frinvList) {
            stdEntLrinvList = new StdEntLrinvList();
            JSONObject frinvObject = (JSONObject) frinvObj;
            stdEntLrinvList.setUuid(UUIDGenerator.generate());
            stdEntLrinvList.setBusinessID(businessID);
            stdEntLrinvList.setReqID(reqID);

            stdEntLrinvList.setLrname(frinvObject.getString("frName"));
            stdEntLrinvList.setInventname(frinvObject.getString("entName"));
            stdEntLrinvList.setInventtype(frinvObject.getString("entType"));
            stdEntLrinvList.setInvregno(frinvObject.getString("regCap"));
            stdEntLrinvList.setInvregno(frinvObject.getString("regCap"));
            stdEntLrinvList.setRegcapcur(frinvObject.getString("regCapCur"));
            stdEntLrinvList.setRegorg(frinvObject.getString("regOrg"));
            stdEntLrinvList.setRegstatus(frinvObject.getString("entStatus"));
            stdEntLrinvList.setRevdate(frinvObject.getString("revDate"));
            stdEntLrinvList.setSubconam(frinvObject.getDouble("subConam"));
            stdEntLrinvList.setCandate(frinvObject.getString("canDate"));
            stdEntLrinvList.setCurrency(frinvObject.getString("currency"));
            stdEntLrinvList.setEsdate(frinvObject.getString("esDate"));
            stdEntLrinvList.setFundedratio(frinvObject.getString("fundedRatio"));
            stdEntLrinvListList.add(stdEntLrinvList);
        }

        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntLrinvListList(stdEntLrinvListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntLrinvListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @Description:
    * @param: [amarsoftData, businessID, reqID]
    * @return: void
    * @author:Dxx
    * @Date: 2018/12/18 19:41
    */
    public static void etlCleanStdEntBasicList(String amarsoftData, String businessID, String reqID) throws Exception {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray r1103Data = r1103.getJSONArray("data");
        JSONArray basicList = r1103Data.getJSONObject(0).getJSONArray("basicList");

        List<StdEntBasicList> stdEntBasicListList = new ArrayList<>();

        //建立入库对象数组
        StdEntBasicList stdEntBasicList = null;
        for (Object basicObj : basicList) {
            stdEntBasicList = new StdEntBasicList();
            JSONObject basicObject = (JSONObject) basicObj;

            stdEntBasicList.setUuid(UUIDGenerator.generate());
            stdEntBasicList.setBusinessID(businessID);
            stdEntBasicList.setReqID(reqID);

            stdEntBasicList.setEntname(basicObject.getString("enterpriseName"));
            stdEntBasicList.setCreditcode(basicObject.getString("creditCode"));
            //stdEntBasicList.setOrgcode(basicObject.getString("orgCode"));Json没有此字段
            stdEntBasicList.setRegno(basicObject.getString("regNo"));
            stdEntBasicList.setEnttype(basicObject.getString("enterpriseType"));
            stdEntBasicList.setLrname(basicObject.getString("frName"));
            stdEntBasicList.setRegcap(basicObject.getDouble("regCap"));
            stdEntBasicList.setRegcapcur(basicObject.getString("regCapCur"));
            stdEntBasicList.setReccap(basicObject.getDouble("recCap"));
            stdEntBasicList.setEsdate(basicObject.getString("esDate"));
            stdEntBasicList.setOpenfrom(basicObject.getString("openFrom"));
            stdEntBasicList.setOpento(basicObject.getString("openTo"));
            stdEntBasicList.setRegorg(basicObject.getString("regOrg"));
            stdEntBasicList.setApprdate(basicObject.getString("apprDate"));
            stdEntBasicList.setRegstatus(basicObject.getString("enterpriseStatus"));

            stdEntBasicList.setAddress(basicObject.getString("address"));
            stdEntBasicList.setAbuitem(basicObject.getString("abuItem"));
            stdEntBasicList.setCbuitem(basicObject.getString("cbuItem"));
            stdEntBasicList.setOperatescope(basicObject.getString("operateScope"));
            stdEntBasicList.setOperatescopeandform(basicObject.getString("operateScopeAndForm"));

            stdEntBasicList.setIndustryphycode(basicObject.getString("industryPhyCode"));
            stdEntBasicList.setIndustryphyname(basicObject.getString("industryPhyName"));
            stdEntBasicList.setIndustrycode(basicObject.getString("industryCode"));
            stdEntBasicList.setIndustryname(basicObject.getString("industryName"));
            stdEntBasicList.setCandate(basicObject.getString("cancelDate"));
            stdEntBasicList.setRevdate(basicObject.getString("revokeDate"));
            stdEntBasicList.setAncheyear(basicObject.getString("ancheYear"));
            stdEntBasicList.setAnchedate(basicObject.getString("ancheDate"));
            stdEntBasicList.setOriregno(basicObject.getString("oriRegNo"));
            stdEntBasicList.setIdentitycardnt(basicObject.getString("identityCardNt"));

            stdEntBasicListList.add(stdEntBasicList);
        }

        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntBasicListList(stdEntBasicListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            stdEntBasicListList.clear();
            sqlSession.close();
        }
    }
    /*
    * @description: std_ent_alter_list
    * @param: [amarsoftdata, businessid, reqid]
    * @return: void
    * @author:dxx
    * @date: 2018/12/17 19:26
    */
    public static void etlCleanStdEntAlterList(String amarsoftData, String businessID, String reqID) {
        //将Json字符串转为Json对象
        JSONObject stringJsonObject = JSONObject.parseObject(amarsoftData);
        JSONObject r1103 = stringJsonObject.getJSONObject("R1103");
        JSONArray r1103Data = r1103.getJSONArray("data");
        JSONArray alterList = r1103Data.getJSONObject(0).getJSONArray("alterList");

        List<StdEntAlterList> StdEntAlterListList = new ArrayList<>();
        StdEntAlterList stdEntAlterList = null;
        for (Object alterObj : alterList) {
            stdEntAlterList = new StdEntAlterList();
            JSONObject alterObject = (JSONObject) alterObj;
            stdEntAlterList.setUuid(UUIDGenerator.generate());
            stdEntAlterList.setBusinessID(businessID);
            stdEntAlterList.setReqID(reqID);
            stdEntAlterList.setAltaf(alterObject.getString("altAf"));
            stdEntAlterList.setAltbe(alterObject.getString("altBe"));
            stdEntAlterList.setAltdate(DateUtils.strToDate(alterObject.getString("altDate")));
            stdEntAlterList.setAltitem(alterObject.getString("altItem"));
            StdEntAlterListList.add(stdEntAlterList);
        }


        SqlSession sqlSession = SqlSessionFactoryUtil.openSqlSession();
        ETLCleanWriteDao ETLCleanWriteDao = sqlSession.getMapper(ETLCleanWriteDao.class);
        try {
            ETLCleanWriteDao.inserStdEntAlterListList(StdEntAlterListList);
            sqlSession.commit();
        } catch (Exception e) {
            e.printStackTrace();
            sqlSession.rollback();
            /*throw new ServiceException(ErrorCodeIDE.VCloudeSpark.Sql_Insert_ERROR
                   + ",std_ent_alter_list标准表入库失败！"
                   + System.getProperty("line.separator")
                   , e);*/
        } finally {
            StdEntAlterListList.clear();
            sqlSession.close();
        }
    }
}
